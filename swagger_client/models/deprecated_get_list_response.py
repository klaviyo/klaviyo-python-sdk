# coding: utf-8

"""
    Klaviyo API

    Empowering creators to own their destiny  # noqa: E501

    OpenAPI spec version: 2022.03.29
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeprecatedGetListResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'str',
        'start': 'int',
        'end': 'int',
        'page': 'int',
        'size': 'int',
        'total': 'int',
        'data': 'list[DeprecatedGetListResponseData]'
    }

    attribute_map = {
        'object': 'object',
        'start': 'start',
        'end': 'end',
        'page': 'page',
        'size': 'size',
        'total': 'total',
        'data': 'data'
    }

    def __init__(self, object=None, start=None, end=None, page=None, size=None, total=None, data=None):  # noqa: E501
        """DeprecatedGetListResponse - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._start = None
        self._end = None
        self._page = None
        self._size = None
        self._total = None
        self._data = None
        self.discriminator = None
        if object is not None:
            self.object = object
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if page is not None:
            self.page = page
        if size is not None:
            self.size = size
        if total is not None:
            self.total = total
        if data is not None:
            self.data = data

    @property
    def object(self):
        """Gets the object of this DeprecatedGetListResponse.  # noqa: E501


        :return: The object of this DeprecatedGetListResponse.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this DeprecatedGetListResponse.


        :param object: The object of this DeprecatedGetListResponse.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def start(self):
        """Gets the start of this DeprecatedGetListResponse.  # noqa: E501


        :return: The start of this DeprecatedGetListResponse.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this DeprecatedGetListResponse.


        :param start: The start of this DeprecatedGetListResponse.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this DeprecatedGetListResponse.  # noqa: E501


        :return: The end of this DeprecatedGetListResponse.  # noqa: E501
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this DeprecatedGetListResponse.


        :param end: The end of this DeprecatedGetListResponse.  # noqa: E501
        :type: int
        """

        self._end = end

    @property
    def page(self):
        """Gets the page of this DeprecatedGetListResponse.  # noqa: E501


        :return: The page of this DeprecatedGetListResponse.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this DeprecatedGetListResponse.


        :param page: The page of this DeprecatedGetListResponse.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def size(self):
        """Gets the size of this DeprecatedGetListResponse.  # noqa: E501


        :return: The size of this DeprecatedGetListResponse.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DeprecatedGetListResponse.


        :param size: The size of this DeprecatedGetListResponse.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def total(self):
        """Gets the total of this DeprecatedGetListResponse.  # noqa: E501


        :return: The total of this DeprecatedGetListResponse.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this DeprecatedGetListResponse.


        :param total: The total of this DeprecatedGetListResponse.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def data(self):
        """Gets the data of this DeprecatedGetListResponse.  # noqa: E501


        :return: The data of this DeprecatedGetListResponse.  # noqa: E501
        :rtype: list[DeprecatedGetListResponseData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DeprecatedGetListResponse.


        :param data: The data of this DeprecatedGetListResponse.  # noqa: E501
        :type: list[DeprecatedGetListResponseData]
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeprecatedGetListResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeprecatedGetListResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
