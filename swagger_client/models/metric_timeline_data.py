# coding: utf-8

"""
    Klaviyo API

    Empowering creators to own their destiny  # noqa: E501

    OpenAPI spec version: 2022.03.29
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetricTimelineData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'str',
        'id': 'str',
        'statistic_id': 'str',
        'timestamp': 'int',
        'event_name': 'str',
        'event_properties': 'MetricTimelineEventProperties',
        '_datetime': 'str',
        'uuid': 'str',
        'person': 'MetricTimelinePerson'
    }

    attribute_map = {
        'object': 'object',
        'id': 'id',
        'statistic_id': 'statistic_id',
        'timestamp': 'timestamp',
        'event_name': 'event_name',
        'event_properties': 'event_properties',
        '_datetime': 'datetime',
        'uuid': 'uuid',
        'person': 'person'
    }

    def __init__(self, object=None, id=None, statistic_id=None, timestamp=None, event_name=None, event_properties=None, _datetime=None, uuid=None, person=None):  # noqa: E501
        """MetricTimelineData - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._id = None
        self._statistic_id = None
        self._timestamp = None
        self._event_name = None
        self._event_properties = None
        self.__datetime = None
        self._uuid = None
        self._person = None
        self.discriminator = None
        if object is not None:
            self.object = object
        if id is not None:
            self.id = id
        if statistic_id is not None:
            self.statistic_id = statistic_id
        if timestamp is not None:
            self.timestamp = timestamp
        if event_name is not None:
            self.event_name = event_name
        if event_properties is not None:
            self.event_properties = event_properties
        if _datetime is not None:
            self._datetime = _datetime
        if uuid is not None:
            self.uuid = uuid
        if person is not None:
            self.person = person

    @property
    def object(self):
        """Gets the object of this MetricTimelineData.  # noqa: E501


        :return: The object of this MetricTimelineData.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this MetricTimelineData.


        :param object: The object of this MetricTimelineData.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def id(self):
        """Gets the id of this MetricTimelineData.  # noqa: E501


        :return: The id of this MetricTimelineData.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetricTimelineData.


        :param id: The id of this MetricTimelineData.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def statistic_id(self):
        """Gets the statistic_id of this MetricTimelineData.  # noqa: E501


        :return: The statistic_id of this MetricTimelineData.  # noqa: E501
        :rtype: str
        """
        return self._statistic_id

    @statistic_id.setter
    def statistic_id(self, statistic_id):
        """Sets the statistic_id of this MetricTimelineData.


        :param statistic_id: The statistic_id of this MetricTimelineData.  # noqa: E501
        :type: str
        """

        self._statistic_id = statistic_id

    @property
    def timestamp(self):
        """Gets the timestamp of this MetricTimelineData.  # noqa: E501


        :return: The timestamp of this MetricTimelineData.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MetricTimelineData.


        :param timestamp: The timestamp of this MetricTimelineData.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def event_name(self):
        """Gets the event_name of this MetricTimelineData.  # noqa: E501


        :return: The event_name of this MetricTimelineData.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this MetricTimelineData.


        :param event_name: The event_name of this MetricTimelineData.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def event_properties(self):
        """Gets the event_properties of this MetricTimelineData.  # noqa: E501


        :return: The event_properties of this MetricTimelineData.  # noqa: E501
        :rtype: MetricTimelineEventProperties
        """
        return self._event_properties

    @event_properties.setter
    def event_properties(self, event_properties):
        """Sets the event_properties of this MetricTimelineData.


        :param event_properties: The event_properties of this MetricTimelineData.  # noqa: E501
        :type: MetricTimelineEventProperties
        """

        self._event_properties = event_properties

    @property
    def _datetime(self):
        """Gets the _datetime of this MetricTimelineData.  # noqa: E501


        :return: The _datetime of this MetricTimelineData.  # noqa: E501
        :rtype: str
        """
        return self.__datetime

    @_datetime.setter
    def _datetime(self, _datetime):
        """Sets the _datetime of this MetricTimelineData.


        :param _datetime: The _datetime of this MetricTimelineData.  # noqa: E501
        :type: str
        """

        self.__datetime = _datetime

    @property
    def uuid(self):
        """Gets the uuid of this MetricTimelineData.  # noqa: E501


        :return: The uuid of this MetricTimelineData.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this MetricTimelineData.


        :param uuid: The uuid of this MetricTimelineData.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def person(self):
        """Gets the person of this MetricTimelineData.  # noqa: E501


        :return: The person of this MetricTimelineData.  # noqa: E501
        :rtype: MetricTimelinePerson
        """
        return self._person

    @person.setter
    def person(self, person):
        """Sets the person of this MetricTimelineData.


        :param person: The person of this MetricTimelineData.  # noqa: E501
        :type: MetricTimelinePerson
        """

        self._person = person

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricTimelineData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricTimelineData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
